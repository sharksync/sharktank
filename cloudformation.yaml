---
AWSTemplateFormatVersion: '2010-09-09'
Description: SharkSync Stack

Parameters:
  WebsiteDomain: 
    Type: String
    Default: www.example.com
    Description: The DNS name of an existing Amazon Route 53 hosted zone domain name e.g. www.example.com
    AllowedPattern: (?!-)[a-zA-Z0-9-.]{1,63}(?<!-)
    ConstraintDescription: must be a valid DNS zone name.
  WebsiteCertificateArn:
    Type: String
    Description: the ARN of an ACM certificate for the website domain that must be in the us-east-1 region.
    AllowedPattern: "arn:aws:acm:.*"
  ApiDomain: 
    Type: String
    Default: api.example.com
    Description: The DNS name of an existing Amazon Route 53 hosted zone domain name e.g. api.example.com
    AllowedPattern: (?!-)[a-zA-Z0-9-.]{1,63}(?<!-)
    ConstraintDescription: must be a valid DNS zone name.
  ApiCertificateArn:
    Type: String
    Description: the ARN of an ACM certificate for the API domain that must be in the us-east-1 region.
    AllowedPattern: "arn:aws:acm:.*"

  DatabaseVpc:
    Description: "Select the VPC to use for the database"
    Type: "AWS::EC2::VPC::Id"
  DatabaseUser:
    Type: "String"
    Description: "Database admin account name"
    MinLength: '5'
    MaxLength: '16'
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    ConstraintDescription: "Name must begin with a letter and contain only alphanumeric characters between 5 - 16 characters."
  DatabasePassword:
    Type: "String"
    Description: "Database admin account password"
    MinLength: '6'
    MaxLength: '41'
    AllowedPattern: "[a-zA-Z0-9]*"
    ConstraintDescription: "Password must contain only alphanumeric characters between 6 and 41 characeters."

Resources:

  S3BucketWeb:
    Type: AWS::S3::Bucket

  CloudFrontAccessIdentity:
    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Ref 'AWS::StackName'

  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: S3BucketWeb
      PolicyDocument:
        Statement:
        - Action:
          - s3:GetObject
          Effect: Allow
          Resource:
            Fn::Join:
            - ''
            - - 'arn:aws:s3:::'
              - Ref: S3BucketWeb
              - "/*"
          Principal:
            AWS:
              - Fn::Join:
                - ''
                - - 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity '
                  - Ref: CloudFrontAccessIdentity

  LambdaEdgeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
            - edgelambda.amazonaws.com
          Action:
          - sts:AssumeRole
      RoleName: 'lambda-edge-role'
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  CloudFront:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        IPV6Enabled: true
        HttpVersion: http2
        Comment: !Ref 'AWS::StackName'
        Aliases: [!Ref WebsiteDomain]
        ViewerCertificate:
          AcmCertificateArn: !Ref WebsiteCertificateArn
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2018
        Origins:
        - Id: s3
          DomainName: !GetAtt S3BucketWeb.DomainName
          S3OriginConfig:
            OriginAccessIdentity: 
              Fn::Join:
               - ''
               - - 'origin-access-identity/cloudfront/'
                 - Ref: CloudFrontAccessIdentity
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          AllowedMethods:
          - GET
          - HEAD
          TargetOriginId: s3
          MinTTL: 3153600000
          DefaultTTL: 3153600000
          MaxTTL: 3153600000
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          SmoothStreaming: false
          Compress: true
          ViewerProtocolPolicy: redirect-to-https
          LambdaFunctionAssociations:
            - EventType: origin-request
              LambdaFunctionARN: 
                Fn::GetAtt:
                  - LambdaEdgeOriginRequest
                  - LambdaVersionedArn
            - EventType: origin-response
              LambdaFunctionARN: 
                Fn::GetAtt:
                  - LambdaEdgeOriginResponse
                  - LambdaVersionedArn
        PriceClass: PriceClass_All

  DNSARecord:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: 
        Fn::Join:
         - ''
         - - !Ref WebsiteDomain
           - '.'
      Type: A
      HostedZoneName: 
        Fn::Join:
         - ''
         - - !Select [1, !Split [".", !Ref WebsiteDomain]]
           - '.'
           - !Select [2, !Split [".", !Ref WebsiteDomain]]
           - '.'
      AliasTarget:
        HostedZoneId: Z2FDTNDATAQYW2
        DNSName: !GetAtt CloudFront.DomainName
  DNSAAAARecord:    
    Type: AWS::Route53::RecordSet
    Properties:
      Name: 
        Fn::Join:
         - ''
         - - !Ref WebsiteDomain
           - '.'
      Type: AAAA
      HostedZoneName: 
        Fn::Join:
         - ''
         - - !Select [1, !Split [".", !Ref WebsiteDomain]]
           - '.'
           - !Select [2, !Split [".", !Ref WebsiteDomain]]
           - '.'
      AliasTarget:
        HostedZoneId: Z2FDTNDATAQYW2
        DNSName: !GetAtt CloudFront.DomainName

  Database:
    Type: AWS::RDS::DBInstance
    Properties:
      VPCSecurityGroups:
      - Ref: DatabaseSecurityGroup
      Engine: postgres
      EngineVersion: 10.3
      DBName: SharkSync
      MasterUsername: !Ref DatabaseUser
      MasterUserPassword: !Ref DatabasePassword
      DBInstanceClass: db.t2.micro
      AllocatedStorage: 20
      StorageType: gp2
      MultiAZ: false

  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Postgres security group
      VpcId: !Ref DatabaseVpc
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 5432
        ToPort: 5432
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 5432
        ToPort: 5432
        CidrIp: 0.0.0.0/0

  WebApiLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      RoleName: 'web-api-lambda-role'
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  WebApiLambdaRoleInlinePolicy:
    Type: AWS::IAM::Policy
    Properties: 
      PolicyName: "web-api-policy"
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: Allow
            Resource: ["*"]
            Action: ["secretsmanager:*", "dynamodb:*"]
      Roles: 
        - Ref: "WebApiLambdaRole"

  WebApiLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: SharkSync.Web.Api::SharkSync.Web.Api.LambdaEntryPoint::FunctionHandlerAsync
      Code:
        S3Bucket: io.sharksync.builds
        S3Key: 
          Fn::Join:
          - ''
          - - 'v0.0.0'
            - '/SharkSync.Web.Api.zip'
      Role:
        Fn::GetAtt:
          - WebApiLambdaRole
          - Arn
      Runtime: dotnetcore2.1
      MemorySize: 256
      Timeout: 300

  WebApiGatewayApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: SharkSync.WebApi
      MinimumCompressionSize: 0
      BinaryMediaTypes:  
        - "image/*"

  WebApiDomainName:
    Type: AWS::ApiGateway::DomainName
    Properties:
      CertificateArn: !Ref ApiCertificateArn
      DomainName: !Ref ApiDomain

  WebApiMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      DomainName: !Ref WebApiDomainName
      RestApiId: !Ref WebApiGatewayApi
      Stage: Prod

  ApiCNAMERecord:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: 
        Fn::Join:
         - ''
         - - !Ref ApiDomain
           - '.'
      Type: CNAME
      TTL: '900'
      ResourceRecords:
        - !GetAtt WebApiDomainName.DistributionDomainName
      HostedZoneName: 
        Fn::Join:
          - ''
          - - !Select [1, !Split [".", !Ref ApiDomain]]
            - '.'
            - !Select [2, !Split [".", !Ref ApiDomain]]
            - '.'

  WebApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt WebApiGatewayApi.RootResourceId
      RestApiId: !Ref WebApiGatewayApi
      PathPart: '{proxy+}'

  WebApiGatewayProxyMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: ANY
      ResourceId: !Ref WebApiGatewayResource
      RestApiId: !Ref WebApiGatewayApi
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: ANY
        Type: AWS_PROXY
        ContentHandling: CONVERT_TO_BINARY
        Uri: !Sub
        - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Arn}/invocations
        - Arn:
            Fn::GetAtt:
            - WebApiLambda
            - Arn
        PassthroughBehavior: WHEN_NO_MATCH
        IntegrationResponses:
          - StatusCode: 200

  WebApiGatewayDeployment:
    DependsOn:
      - WebApiGatewayProxyMethod
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref WebApiGatewayApi
      StageName: Prod

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt 
        - WebApiLambda
        - Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn:
        Fn::Join:
        - ''
        - - 'arn:aws:execute-api:'
          - Ref: AWS::Region
          - ":"
          - Ref: AWS::AccountId
          - ":"
          - Ref: WebApiGatewayApi
          - "/*/*/*"

  DeploymentLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      RoleName: 'deployment-lambda-role'
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  DeploymentLambdaRoleInlinePolicy:
    Type: AWS::IAM::Policy
    Properties: 
      PolicyName: "deployment-policy"
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: Allow
            Resource: 
              Fn::Join:
              - ''
              - - 'arn:aws:s3:::'
                - !Ref S3BucketWeb
                - '/*'
            Action: ["s3:PutObject", "s3:GetObject"]
          - Effect: Allow
            Resource: 
              Fn::Join:
              - ''
              - - 'arn:aws:s3:::io.sharksync.builds/*'
            Action: ["s3:GetObject"]
          - Effect: Allow
            Resource: 
              Fn::Join:
              - ''
              - - 'arn:aws:lambda:*:*:function:'
                - !Ref 'AWS::StackName'
                - '-*'
            Action: ["lambda:CreateFunction", "lambda:UpdateFunctionCode", "lambda:DeleteFunction"]
          - Effect: Allow
            Resource: 
              Fn::GetAtt:
                - LambdaEdgeRole
                - Arn
            Action: ["iam:PassRole"]
          - Effect: Allow
            Resource: "*"
            Action: ["cloudfront:CreateInvalidation"]
      Roles: 
        - Ref: "DeploymentLambdaRole"

  UnpackZipIntoS3BucketFunctionLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: SharkSync.Deployment::SharkSync.Deployment.UnpackZipIntoS3BucketFunction::FunctionHandlerAsync
      Code:
        S3Bucket: io.sharksync.builds
        S3Key: 
          Fn::Join:
          - ''
          - - 'v0.0.0'
            - '/SharkSync.Deployment.zip'
      Role:
        Fn::GetAtt:
          - DeploymentLambdaRole
          - Arn
      Runtime: dotnetcore2.1
      MemorySize: 128
      Timeout: 60

  DeployLambdaEdgeFunctionLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: SharkSync.Deployment::SharkSync.Deployment.DeployLambdaEdgeFunction::FunctionHandlerAsync
      Code:
        S3Bucket: io.sharksync.builds
        S3Key: 
          Fn::Join:
          - ''
          - - 'v0.0.0'
            - '/SharkSync.Deployment.zip'
      Role:
        Fn::GetAtt:
          - DeploymentLambdaRole
          - Arn
      Runtime: dotnetcore2.1
      MemorySize: 128
      Timeout: 60

  InvalidateCloudFrontFunctionLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: SharkSync.Deployment::SharkSync.Deployment.InvalidateCloudFrontFunction::FunctionHandlerAsync
      Code:
        S3Bucket: io.sharksync.builds
        S3Key: 
          Fn::Join:
          - ''
          - - 'v0.0.0'
            - '/SharkSync.Deployment.zip'
      Role:
        Fn::GetAtt:
          - DeploymentLambdaRole
          - Arn
      Runtime: dotnetcore2.1
      MemorySize: 128
      Timeout: 60

  MigrateDatabaseFunctionLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: SharkSync.Deployment::SharkSync.Deployment.MigrateDatabaseFunction::FunctionHandlerAsync
      Code:
        S3Bucket: io.sharksync.builds
        S3Key: 
          Fn::Join:
          - ''
          - - 'v0.0.0'
            - '/SharkSync.Deployment.zip'
      Role:
        Fn::GetAtt:
          - DeploymentLambdaRole
          - Arn
      Runtime: dotnetcore2.1
      MemorySize: 128
      Timeout: 60

  UnpackZipIntoS3BucketFunction:
    Type: Custom::UnpackZipIntoS3BucketFunction
    DependsOn: UnpackZipIntoS3BucketFunctionLambda
    Properties:
      ServiceToken: !GetAtt UnpackZipIntoS3BucketFunctionLambda.Arn
      ZipS3Bucket: io.sharksync.builds
      ZipS3Key: 
        Fn::Join:
        - ''
        - - 'v0.0.0'
          - '/SharkSync.Web.Html.zip'
      OutputS3Bucket: !Ref S3BucketWeb
      OutputPrefix: ''

  LambdaEdgeOriginRequest:
    Type: Custom::DeployLambdaEdgeFunction
    DependsOn: DeployLambdaEdgeFunctionLambda
    Properties:
      ServiceToken: !GetAtt DeployLambdaEdgeFunctionLambda.Arn
      EmbeddedFileName: origin-request.js
      FunctionName: 
        Fn::Join:
        - ''
        - - !Ref 'AWS::StackName'
          - '-origin-request'
      RoleArn: 
        Fn::GetAtt:
          - LambdaEdgeRole
          - Arn
      Version: 'v0.0.0'
      
  LambdaEdgeOriginResponse:
    Type: Custom::DeployLambdaEdgeFunction
    DependsOn: DeployLambdaEdgeFunctionLambda
    Properties:
      ServiceToken: !GetAtt DeployLambdaEdgeFunctionLambda.Arn
      EmbeddedFileName: origin-response.js
      FunctionName: 
        Fn::Join:
        - ''
        - - !Ref 'AWS::StackName'
          - '-origin-response'
      RoleArn: 
        Fn::GetAtt:
          - LambdaEdgeRole
          - Arn
      Version: 'v0.0.0'
      ReplacementPairs: 
        - Fn::Join:
          - ''
          - - 'ServiceUrl=https://'
            - !Ref ApiDomain

  InvalidateCloudFront:
    Type: Custom::InvalidateCloudFrontFunction
    DependsOn: 
      - InvalidateCloudFrontFunctionLambda
      - UnpackZipIntoS3BucketFunction
      - CloudFront
    Properties:
      ServiceToken: !GetAtt InvalidateCloudFrontFunctionLambda.Arn
      DistributionId: !Ref CloudFront
      CallerReference: 'v0.0.0'
      Paths: 
        - "/"
        - "/Console/*"

  MigrateDatabaseFunction:
    Type: Custom::MigrateDatabaseFunction
    DependsOn: 
      - MigrateDatabaseFunctionLambda
      - Database
    Properties:
      ServiceToken: !GetAtt MigrateDatabaseFunctionLambda.Arn
      DatabaseServer: !GetAtt Database.Endpoint.Address
      DatabaseName: SharkSync
      DatabaseUsername: !Ref DatabaseUser
      DatabasePassword: !Ref DatabasePassword
      Version: 'v0.0.0'